Create e5500 specific math_private.h and let it include when compiling for e5500/64bit core
We prefefine __CPU_HAS_FSQRT to 0 and then in general ppc64 math_private.h we check if its
already defined before redefining it. This way we can ensure that on e5500 builds it wont
emit fsqrt intructions

-Khem

Upstream-Status: Pending

Index: libc/sysdeps/powerpc/fpu/math_private.h
===================================================================
--- libc.orig/sysdeps/powerpc/fpu/math_private.h	2012-09-03 22:37:58.000000000 -0700
+++ libc/sysdeps/powerpc/fpu/math_private.h	2012-09-17 09:35:09.709124003 -0700
@@ -25,10 +25,12 @@
 #include <dl-procinfo.h>
 #include_next <math_private.h>
 
-# if __WORDSIZE == 64 || defined _ARCH_PWR4
-#  define __CPU_HAS_FSQRT 1
-# else
-#  define __CPU_HAS_FSQRT ((GLRO(dl_hwcap) & PPC_FEATURE_64) != 0)
+# ifndef __CPU_HAS_FSQRT
+#  if __WORDSIZE == 64 || defined _ARCH_PWR4
+#   define __CPU_HAS_FSQRT 1
+#  else
+#   define __CPU_HAS_FSQRT ((GLRO(dl_hwcap) & PPC_FEATURE_64) != 0)
+#  endif
 # endif
 
 extern double __slow_ieee754_sqrt (double);
Index: libc/ports/sysdeps/powerpc/powerpc64/e5500/fpu/math_private.h
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ libc/ports/sysdeps/powerpc/powerpc64/e5500/fpu/math_private.h	2012-09-17 09:56:59.129124074 -0700
@@ -0,0 +1,9 @@
+#ifndef _E5500_MATH_PRIVATE_H_
+#define _E5500_MATH_PRIVATE_H_ 1
+/* E5500 core FPU does not implement
+   fsqrt */
+
+#define __CPU_HAS_FSQRT 0
+#include_next <math_private.h>
+
+#endif /* _E5500_MATH_PRIVATE_H_ */
